/*
* 分组的作用：
*   1. 改变的默认值的优先级
*   2. 分组捕获
*   3. 分组捕获
* */

//=> 改变原有优先级
// let reg = /^18|19$/; // 表示以18开头或者以19结尾
// console.log(reg.test('18')); // true
// console.log(reg.test('19')); // true
// console.log(reg.test('1819')); // true
// console.log(reg.test('119')); // true


// let reg = /^(18|19)$/; // 表示以小括号这个整体开头并且以这个小括号整体结尾，即就是这个小括号，然后小括号里面的结果是18或者19
// console.log(reg.test('18')); // true
// console.log(reg.test('19')); // true
// console.log(reg.test('1819')); // false
// console.log(reg.test('119')); // false

// => 分组引用：在正则中我们可以使用 \1 来表示和第一个分组中相同的内容，同理\2 表示和正则第二个分组中的内容。

// // 需求：输入一个手机号，看后三位是不是和开头三位相同
// let reg = /$(\d{3})\d5\1$/;
// console.log(reg.test(reg.test('17701045177'))); // true
// console.log(reg.test(reg.test('17701045178'))); // false

// => 分组捕获：

// 需求：编写一个匹配身份证号码的正则，并且把出生地、出生年月日、性别获取到
/*
* 身份证号：13062319920702131
* 130623 保定市涞水县
* 19920709 1992年07月09日
* 2131 随机码 倒数第二位是奇数是男性，偶数是女性；最后一位还有可能是X
*
* */

// 简单匹配正则：
// let reg = /^\d{17}(\d|X)$/; //只能匹配是否符合格式，但是不能捕获信息

// let reg = /^(\d{6})(\d{4})(\d{2})(\d{2})\d{2}(\d)(?:\d|X)$/;
// console.log(reg.exec('130623199207092131'));

// =>exec实现的是正则捕获，获取的结果是一个数组。如果不匹配，获取的结果是null（注意不是空数组）。捕获的时候不仅把大正则匹配的信息捕获到，而且每一个小分组中的内容也捕获到了（分组捕获）。

/*
* 正则捕获使用的是正则中的exec方法
*   1. 如果可以匹配获取的结果是一个数组，如果不能匹配获取的结果是null；
*   2. 如果我们在匹配的时候，想要获取大正则中部分信息，我们可以把这部分使用小括号包起来，形成一个小分组，这样在捕获的时候，不仅可以把大正则匹配到的信息捕获到，而且还可以单独把小分组匹配到的部分信息也捕获到了（分组捕获）
*   3. 有时候写的小括号不是为了捕获信息，只是为了改变优先级或者进行分组引用，此时我们在小括号里加上“?:”，代表当前分组只匹配不捕获，这样在捕获的时候就不会捕获这个小括号中的内容。
*
*
* */